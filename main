import pygame
from sprite2 import *
from config2 import *

import sys
from random import *
import time


class Game:
    # je crée la classe du code centrale afin de mieux m'y retrouver
    def __init__(self):
        # je crée __init__ qui va crée l'affichage de mon jeu
        pygame.init()  # j'initialise pygame
        # je crée la fenetre que je vais afficher
        pygame.display.set_caption('Chad Adventure')
        pygame.display.set_icon(gigachad)
        self.ecran = pygame.display.set_mode((WIN_WIDTH, WIN_HEIGHT))
        self.clock = pygame.time.Clock()  # je crée la boucle d'affichage

        self.running = True

        self.character_spritesheet = Spritesheet('img/character.png')  # j'assigne ma fiche de sprite personnage a la
        # variable d'afichage de mon personnage
        self.terrain_spritesheet = Spritesheet('img/terrain.png')  # j'assigne ma fiche de sprite terrain a la
        # variable d'afichage de mes terrain
        self.enemy_spritesheet = Spritesheet('img/enemy.png')  # j'assigne ma fiche de sprite enemy a la variable
        # d'afichage de mes ennemies
        self.attack_spritesheet = Spritesheet('img/attack.png') # j'assigne ma fiche de sprite attack a la variable
        # d'afichage de mes attaques

    def cree_Map0(self):
        for i, rangee in enumerate(map0):
            for j, colonne in enumerate(rangee):  # je crée un tableau qui sera ma carte ou si sur la rangée i a la
                # colonne i il y a un'b' alors il crée un block au coordoné et si il y a un 'p' alors il crée un
                # joueur au coordoné
                Ground(self, j, i)
                if colonne == "B":
                    Block(self, j, i)
                if colonne == "P":
                    self.player = player(self, j, i)
                if colonne == "F":
                    Fleur(self, j, i)
                if colonne == "L":
                    Lave(self, j, i)
                if colonne == "G":
                    GroundBoss(self, j, i)
                if colonne == "E":
                    Flaque(self, j, i)
                if colonne == "V":
                    Enemy(self, j, i)
                if colonne == "0":
                    pass
                if colonne == "1":
                    pass
                if colonne == "2":
                    pass
                if colonne == "3":
                    pass
                if colonne == "4":
                    pass
                if colonne == "5":
                   pass

    def new(self):
        # quand une nouvelle partie ce lance
        pygame.mixer.init()
        pygame.mixer.music.load('music/Music-3.ogg')
        pygame.mixer.music.set_volume(0.2)
        pygame.mixer.music.play()
        self.playing = True
        self.all_sprite = pygame.sprite.LayeredUpdates()
        self.blocks = pygame.sprite.LayeredUpdates()
        self.ennemie = pygame.sprite.LayeredUpdates()
        self.attack = pygame.sprite.LayeredUpdates()  # a chaque action il vérifie les couches des entité pour
        # verifier les interraction

        self.cree_Map0()

    def events(self):
        # la boucle des evenement du jeu
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                self.playing = False
                self.running = False
                # si le joueur ne joue pas le jeu s'arrete
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_SPACE:
                    if self.player.facing == 'up':
                        Attack(self, self.player.rect.x, self.player.rect.y - TAILLE_TUILE)
                    if self.player.facing == 'down':
                        Attack(self, self.player.rect.x, self.player.rect.y + TAILLE_TUILE)
                    if self.player.facing == 'left':
                        Attack(self, self.player.rect.x - TAILLE_TUILE, self.player.rect.y)
                    if self.player.facing == 'right':
                        Attack(self, self.player.rect.x + TAILLE_TUILE, self.player.rect.y)

    def update(self):
        # la boucle  de maj du jeu
        self.all_sprite.update()  # tout les sprite se mette a jour en permanence

    def draw(self):
        # la boucle d'affichage
        self.ecran.fill(BLACK)  # Je remplie mon écran de noir
        self.all_sprite.draw(self.ecran)  # la fonction dessine tout les sprites
        self.clock.tick(FPS)  # Le jeu affiche autant d'image par seconde que la variable fps le dit
        pygame.display.update()  # la fonction draw redessine chaque sprites a chaque reboot

    def main(self):
        # la boucle du jeu qui s'arrete lorsque le player ne joue plus et qui fais en sorte que dés que le clavier
        # réagis ou qu'il y a un evenement le jeu se met a jour et le dessine sur l'écran
        while self.playing:
            self.events()
            self.update()
            self.draw()
        self.running = False

    def game_over(self):
        pass

    def intro(self):
        pass


g = Game()
g.intro()
g.new()
while g.running:
    g.main()
    g.game_over()
pygame.quit()
