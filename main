import pygame
from sprite import *
from config import *
import sys
from random import *
import time

ecran = pygame.display.set_mode((WIN_WIDTH, WIN_HEIGHT))


class Game:
    # je crée la classe du code centrale afin de mieux m'y retrouver
    def __init__(self):
        # je crée __init__ qui va crée l'affichage de mon jeu
        pygame.init()  # j'initialise pygame
        # je crée la fenetre que je vais afficher
        self.ecran = pygame.display.set_mode((WIN_WIDTH, WIN_HEIGHT))
        self.clock = pygame.time.Clock()  # je crée la boucle d'affichage
        self.running = True

        self.character_spritesheet = Spritesheet(
            'img/character.png')  # j'assigne ma fiche de sprite personnage a la variable d'afichage de mon personnage
        self.terrain_spritesheet = Spritesheet(
            'img/terrain.png')  # j'assigne ma fiche de sprite terrain a la variable d'afichage de mes terrain
        self.enemy_spritesheet = Spritesheet('img/enemy.png')

    def cree_Map(self):
        for i, rangee in enumerate(map):
            for j, colonne in enumerate(rangee):  # je crée un tableau qui sera ma carte ou si sur la rangée i a la
                # colonne i il y a un'b' alors il crée un block au coordoné et si il y a un 'p' alors il crée un
                # joueur au coordoné
                Ground(self, j, i)
                if colonne == "B":
                    Block(self, j, i)
                if colonne == "P":
                    Player(self, j, i)
                if colonne == "F":
                    Fleur(self, j, i)
                if colonne == "L":
                    Lave(self, j, i)
                if colonne == "G":
                    GroundBoss(self, j, i)
                if colonne == "E":
                    Flaque(self, j, i)
                if colonne == "V":
                    Enemy(self, j, i)

    def new(self):
        # quand une nouvelle partie ce lance

        self.playing = True
        self.all_sprite = pygame.sprite.LayeredUpdates()
        self.blocks = pygame.sprite.LayeredUpdates()
        self.ennemie = pygame.sprite.LayeredUpdates()
        self.attack = pygame.sprite.LayeredUpdates()  # a chaque action il vérifie les couches des entité pour
        # verifier les interraction

        self.cree_Map()

    def events(self):
        # la boucle des evenement du jeu
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                self.playing = False
                self.running = False
                # si le joueur ne joue pas le jeu s'arrete

    def update(self):
        # la boucle  de maj du jeu
        self.all_sprite.update()  # tout les sprite se mette a jour en permanence

    def draw(self):
        # la boucle d'affichage
        self.ecran.fill(BLACK)  # Je remplie mon écran de noir
        self.all_sprite.draw(self.ecran)  # la fonction dessine tout les sprites
        self.clock.tick(FPS)  # Le jeu affiche autant d'image par seconde que la variable fps le dit
        pygame.display.update()  # la fonction draw redessine chaque sprites a chaque reboot

    def main(self):
        # la boucle du jeu qui s'arrete lorsque le player ne joue plus et qui fais en sorte que dés que le clavier
        # réagis ou qu'il y a un evenement le jeu se met a jour et le dessine sur l'écran
        while self.playing:
            self.events()
            self.update()
            self.draw()
        self.running = False

    def game_over(self):
        pass

    def intro(self):
        pass


g = Game()
# charge l'ecran


# initialisation de la boucle
clock = pygame.time.Clock()
running = True
while running:
    clock.tick(60)

    #dans le menu
    if Mode_Jeux=="Menu":
        ecran.blit(background_1,(0,0))
        #affiche les boutons des modes de jeux dans le menu dans le menu
        if Bouton_Histoire.draw(win):
            Mode_Jeux='Histoire'
            g.new()
        if Bouton_Duels.draw(win):
            Mode_Jeux='Duels'
            boss,AllAttaqueBoss,Objet_tonneau=mode_duel()
        if Bouton_Boss.draw(win):
            Mode_Jeux='Boss'
            player, boss, AllAttaqueBoss, AllobjetsBoss,timer_colision_player_dgt,timer_colision_player_attaque,img_atk_player,AllAttaquePlayer,derniere_action = charge_element_mode_boss() #charge le mode boss
        if Bouton_Parametre.draw(win):
            Mode_Jeux='Paramètre'

    #elif Mode_Jeux=="Histoire": #dans le mode histoire


    elif Mode_Jeux=="Duels": #dans le mode duels
        ecran.blit(background_2,(0,0))

    elif Mode_Jeux=="Boss": #dans le mode Boss
        ecran.blit(background_2,(0,0))

        timer_colision_player_dgt=timer_colision(timer_colision_player_dgt)
        timer_colision_player_attaque=timer_attaque(timer_colision_player_attaque)

        #interaction entre objet
        for Atk_boss in AllAttaqueBoss:
            #si l'attaque ennemie touche le boss
            if (Atk_boss.rect.y < boss.hitbox[1] + boss.hitbox[3] and Atk_boss.rect.y + 16 > boss.hitbox[1] and Atk_boss.rect.x + 16 > boss.hitbox[0] and Atk_boss.rect.x < boss.hitbox[0] + boss.hitbox[2]):
                Atk_boss.rebond() #l'attaque rebondit
            for Objet in AllobjetsBoss:
                #si l'attaque ennemie touche un objet
                if (Atk_boss.rect.y < Objet.hitbox[1] + Objet.hitbox[3] and Atk_boss.rect.y + 16 > Objet.hitbox[1] and Atk_boss.rect.x + 16 > Objet.hitbox[0] and Atk_boss.rect.x < Objet.hitbox[0] + Objet.hitbox[2]):
                    Atk_boss.rebond()
                    Objet.hit() #l'objet prend des dgt
            #si l'attaque ennemie touche le joueur
            if timer_colision_player_dgt==0 and (Atk_boss.rect.y < player.hitbox[1] + player.hitbox[3] and Atk_boss.rect.y + 16 > player.hitbox[1] and Atk_boss.rect.x + 16 > player.hitbox[0] and Atk_boss.rect.x < player.hitbox[0] + player.hitbox[2]):
                Atk_boss.rebond()
                player.hit()
                timer_colision_player_dgt=1 #le persos ne prend pas de dgt apres s'etre deja pris une attaque pendant les 20 prochaine images

        #deplacement du player
        if not(Colision_player(AllobjetsBoss,player,boss,AllAttaqueBoss)): #si le joueur n'est pas en colision
            derniere_action, gauche=deplacement_gauche_player(player,derniere_action)
            derniere_action, droite=deplacement_droite_player(player,derniere_action)
            derniere_action, haut =deplacement_haut_player(player,derniere_action)
            derniere_action, bas=deplacement_bas_player(player,derniere_action)
            pas_deplacement_player(player)
        else: #sinon bloquer le personnage dans une des directions
            if derniere_action =="gauche":
                derniere_action, droite=deplacement_droite_player(player,derniere_action)
                pas_deplacement_player(player)
            if derniere_action =="droite":
                derniere_action, gauche=deplacement_gauche_player(player,derniere_action)
                pas_deplacement_player(player)
            if derniere_action =="haut":
                derniere_action, bas=deplacement_bas_player(player,derniere_action)
                pas_deplacement_player(player)
            if derniere_action =="bas":
                derniere_action, haut=deplacement_haut_player(player,derniere_action)
                pas_deplacement_player(player)
        print(derniere_action)

        #attaque du player
        AllAttaquePlayer, timer_colision_player_attaque=lance_atk_player(AllAttaquePlayer, timer_colision_player_attaque,derniere_action,img_atk_player,player)

        #affiche les sprites
        charge_sprite_duel(AllobjetsBoss,boss,player,AllAttaqueBoss,AllAttaquePlayer)

        #si le boss meurt
        if boss.mort():
            time.sleep(3)
            Mode_Jeux="Menu"      #retour au menu

        #si le player meurt
        if player.mort():
            time.sleep(3)
            Mode_Jeux="Menu"      #retour au menu


    elif Mode_Jeux=="Paramètre": #dans les paramètres
        ecran.blit(background_2,(0,0))


    pygame.display.flip() #actualise la page
    for event in pygame.event.get():

        if event.type==pygame.QUIT:    #si on ferme le jeu
            running=False
            pygame.quit()
            print("fermeture du jeu")


# Je lance une nouvelle partie
while g.running:
    g.main()  # tant que le jeu est lancer les fonction events update et draw se lance en continue jusque a l'arret
    # du jeu
    g.game_over()
sys.exit()
pygame.quit()
