import pygame, sys
from config import *
from sprite import *
from sprite2 import *

#le mode de jeux est initialiser a "Menu"
Mode_Jeux="Menu"

#Donnée necessaire pour les classe
SCREEN = WIDTH, HEIGHT = 1200, 600
win = pygame.display.set_mode(SCREEN, pygame.NOFRAME)

#charge image des arrière plan
background_1=pygame.image.load('img/plateau-menu.PNG')
background_2=pygame.image.load('img/sol.PNG')

#charge image des boutons des modes de jeux
img_Bouton_Histoire=pygame.image.load('img/Mode-Histoire.png')
img_Bouton_Boss=pygame.image.load('img/Mode-Boss.png')
img_Bouton_Duels=pygame.image.load('img/Mode-Duels.png')
img_Bouton_Parametre=pygame.image.load('img/Mode-Paramètre.png')
#charge les boutons des modes de jeu
Bouton_Histoire = Button(img_Bouton_Histoire, (202, 50), 500, 200)
Bouton_Boss = Button(img_Bouton_Boss, (202, 50), 500, 275)
Bouton_Duels = Button(img_Bouton_Duels, (202, 50), 500, 350)
Bouton_Parametre = Button(img_Bouton_Parametre, (202, 50), 500, 425)

def charge_element_mode_boss():
    #charge le player
    player=Player(210,116,32,32)

    #charge image Boss
    img_boss=pygame.image.load('img/boss.png')
    #charge Boss
    boss = Boss(img_boss, (160, 184), 520, 200)

    #charge image attaque boss
    img_atk_boss=pygame.image.load("img/Attaque-Ennemie.png")
    #charge attaque Boss
    AllAttaqueBoss=pygame.sprite.Group() #Groupe de toute les attaques
    for x in range(32,1200,64):
        Atk_boss=Attaqueboss([0,-2],(16,16),img_atk_boss,x,0)
        AllAttaqueBoss.add(Atk_boss)
    for x in range(0,1200,64):
        Atk_boss=Attaqueboss([0,2],(16,16),img_atk_boss,x,584)
        AllAttaqueBoss.add(Atk_boss)
    for y in range(32,600,64):
        Atk_boss=Attaqueboss([-2,0],(16,16),img_atk_boss,0,y)
        AllAttaqueBoss.add(Atk_boss)
    for y in range(0,600,64):
        Atk_boss=Attaqueboss([2,0],(16,16),img_atk_boss,1184,y)
        AllAttaqueBoss.add(Atk_boss)


    #charge image des objet des modes de jeux
    img_Tonneau=pygame.image.load('img/tonneau.png')
    #charge les objets du mode duel
    AllobjetsBoss=pygame.sprite.Group() #Groupe de toute les objets
    #carré de gauche
    Objet=Objet_destructible(img_Tonneau,(32,32),200,84)
    AllobjetsBoss.add(Objet)
    Objet=Objet_destructible(img_Tonneau,(32,32),168,116)
    AllobjetsBoss.add(Objet)
    Objet=Objet_destructible(img_Tonneau,(32,32),168,100)
    AllobjetsBoss.add(Objet)
    Objet=Objet_destructible(img_Tonneau,(32,32),168,132)
    AllobjetsBoss.add(Objet)
    Objet=Objet_destructible(img_Tonneau,(32,32),200,148)
    AllobjetsBoss.add(Objet)
    #tonneau aléatoir sur la map
    for loop in range(20):
        x=random.randint(5,30)*32
        y=random.randint(5,30)*16
        if not 488<x<680 and 168<y<384: #si le tonneau n'est pas dans la hitbox du boss
            Objet=Objet_destructible(img_Tonneau,(32,32),x,y)
            AllobjetsBoss.add(Objet)

    timer_colision_player_attaque=0 #charge le timer des atk du player
    timer_colision_player_dgt=0#charge le timer des dgt subis par le player

    img_atk_player=pygame.image.load("img/Atk-player.png")
    AllAttaquePlayer=pygame.sprite.Group() #charge le groupe d'atk du player

    derniere_action="" #retient le dernier depalcement du player

    return player, boss, AllAttaqueBoss,AllobjetsBoss,timer_colision_player_dgt,timer_colision_player_attaque,img_atk_player,AllAttaquePlayer,derniere_action

def Colision_player(AllobjetsBoss,player,boss,AllAttaqueboss):
    """
    renvoie si le player touche un tonneau
    entre : list, instance
    sortie : bool
    """
    for Objet in AllobjetsBoss:#pour chaque objet si  le persos touche un des objets
        if (player.y < Objet.hitbox[1] + Objet.hitbox[3] and player.y + 30 > Objet.hitbox[1] and player.x + 26 > Objet.hitbox[0] and player.x < Objet.hitbox[0] + Objet.hitbox[2]):
            return True
    for Atk_boss in AllAttaqueboss: #pour chaque Attaque du boss si  le persos touche une des attaques
        if (player.y < Atk_boss.hitbox[1] + Atk_boss.hitbox[3] and player.y + 30 > Atk_boss.hitbox[1] and player.x + 26 > Atk_boss.hitbox[0] and player.x < Atk_boss.hitbox[0] + Atk_boss.hitbox[2]):
            return True
    #si le persos touche le boss
    if (player.y < boss.hitbox[1] + boss.hitbox[3] and player.y + 30 > boss.hitbox[1] and player.x + 26 > boss.hitbox[0] and player.x < boss.hitbox[0] + boss.hitbox[2]):
        return True


def timer_colision(timer):
    """
    met en place le timer des colision du player
    entre: int
    sortie: int
    """
    if timer>0:
        timer+=1
    if timer>20:
        timer=0
    return timer

def timer_attaque(timer):
    """
    met en place le timer des attaques du player
    entre: int
    sortie: int
    """
    if timer>0:
        timer+=1
    if timer>60:
        timer=0
    return timer

def deplacement_gauche_player(player,derniere_action):
    """
    fait deplacer le player vers la gauche
    """
    keys = pygame.key.get_pressed()
    #si clique sur la flèche de gauche mais pas sur les autre touche de deplacement
    if keys[pygame.K_LEFT] and player.x > 0 and not(keys[pygame.K_RIGHT] or keys[pygame.K_UP] or keys[pygame.K_DOWN]):
        player.x -= player.vel  #deplacement vers la gauche
        player.gauche = True
        player.droite = False
        player.haut =False
        player.bas = False
        player.standing = False
        derniere_action="gauche"
        return derniere_action,True
    else:
        return derniere_action,False

def deplacement_droite_player(player,derniere_action):
    """
    fait deplacer le player vers la droite
    """
    keys = pygame.key.get_pressed()
    #si clique sur la flèche de droite mais pas sur les autre touche de deplacement
    if keys[pygame.K_RIGHT] and player.x < 1175 and not(keys[pygame.K_LEFT] or keys[pygame.K_UP] or keys[pygame.K_DOWN]):
        player.x += player.vel # deplacement vers la droite
        player.gauche = False
        player.droite = True
        player.haut =False
        player.bas = False
        player.standing = False
        derniere_action="droite"
        return derniere_action, True
    else:
        return derniere_action, False

def deplacement_haut_player(player,derniere_action):
    """
    fait deplacer le player vers le haut
    """
    keys = pygame.key.get_pressed()
    #si clique sur la flèche du haut mais pas sur les autre touche de deplacement
    if keys[pygame.K_UP] and player.y > 0 and not(keys[pygame.K_RIGHT] or keys[pygame.K_LEFT] or keys[pygame.K_DOWN]):
        player.y -= player.vel # deplacement vers le haut
        player.gauche = False
        player.droite = False
        player.haut =True
        player.bas = False
        player.standing = False
        derniere_action="haut"
        return derniere_action, True
    else:
        return derniere_action, False

def deplacement_bas_player(player,derniere_action):
    keys = pygame.key.get_pressed()
    #si clique sur la flèche du bas mais pas sur les autre touche de deplacement
    if keys[pygame.K_DOWN] and player.y < 570 and not(keys[pygame.K_RIGHT] or keys[pygame.K_UP] or keys[pygame.K_LEFT]):
        player.y+= player.vel # deplacement vers le bas
        player.gauche = False
        player.droite = False
        player.haut =False
        player.bas = True
        player.standing = False
        derniere_action="bas"
        return derniere_action, True
    else:
        return derniere_action, False

def pas_deplacement_player(player):
    """
    le player ne se deplace pas
    """
    keys = pygame.key.get_pressed()
    #si aucune touche de deplacement sont pressé
    if not (keys[pygame.K_DOWN] and keys[pygame.K_UP] and keys[pygame.K_LEFT] and keys[pygame.K_RIGHT]):
        player.standing = True # le persos est considérer comme statique
        player.walkCount = 0

def charge_sprite_duel(AllobjetsBoss,boss,player,AllAttaqueBoss,AllAttaquePlayer):
    for Objet in AllobjetsBoss:
        Objet.draw(win)
    boss.draw(win)
    player.draw(win)
    for Atk_boss in AllAttaqueBoss:
        Atk_boss.draw(win)
    for Atk_player in AllAttaquePlayer:
        Atk_player.draw(win)

def lance_atk_player(AllAttaquePlayer ,timer_colision_player_attaque,derniere_action,img_atk_player,player):
    keys = pygame.key.get_pressed()
    if keys[pygame.K_SPACE] and timer_colision_player_attaque==0: #si on appuie sur la touche espace et que le aucune attaque n'a été faite dans le dernière seconde
        if derniere_action=="haut": #si le persos est orienté vers le haut
            Atk_player=Attaqueplayer([0,-2],(16,16),img_atk_player,player.x,player.y) #lance une attasue vers le haut
            AllAttaquePlayer.add(Atk_player)
        if derniere_action=="droite": #si le player est orienté vers la droite
            Atk_player=Attaqueplayer([2,0],(16,16),img_atk_player,player.x,player.y) #lance une attaque vers la droite
            AllAttaquePlayer.add(Atk_player)
        if derniere_action=="gauche": #si le player est orienté vers la gauche
            Atk_player=Attaqueplayer([-2,0],(16,16),img_atk_player,player.x,player.y) #lance une attaque vers la gauche
            AllAttaquePlayer.add(Atk_player)
        if derniere_action=="bas": #si le player est orienté vers le bas
            Atk_player=Attaqueplayer([0,2],(16,16),img_atk_player,player.x,player.y) #lance une attaque vers le bas
            AllAttaquePlayer.add(Atk_player)
        timer_colision_player_attaque=1 #lance le timer des attaques du player
    return AllAttaquePlayer, timer_colision_player_attaque

